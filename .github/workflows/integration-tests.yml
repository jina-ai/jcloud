name: Integration tests

on:
  workflow_dispatch:
    inputs:
      branch:
        description: Pass the JCloud branch
        required: false
        default: main
      jcloud-api:
        description: JCloud API Server Environment
        required: false
        default: prod
  schedule:
    - cron: "0 4,16 * * 1-5"

jobs:
  prep-testbed:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.branch }}
      - id: set-matrix
        run: |
          sudo apt-get install jq
          echo "::set-output name=matrix::$(bash scripts/get-all-test-paths.sh integration 1)"
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  integration-tests:
    needs: prep-testbed
    runs-on: ubuntu-latest
    env:
      JINA_AUTH_TOKEN: ${{ secrets.JCLOUD_INTEGRATION_TESTS_TOKEN }}
    permissions:
      id-token: write
      contents: write
    strategy:
      max-parallel: 5
      fail-fast: false
      matrix:
        python-version: [3.7]
        test-path: ${{fromJson(needs.prep-testbed.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.branch }}
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Read secrets from AWS Secrets Manager into environment variables
        uses: abhilash1in/aws-secrets-manager-action@v2.1.0
        with:
          secrets: |
            /wolf/nprd/general
          parse-json: true
      - name: Prepare environment
        if: ${{ github.event.inputs.jcloud-api }} == "dev" || ${{ github.event.inputs.jcloud-api }} == "prod" || ${{ github.event.inputs.jcloud-api }} == "CI"
        env:
          JC_API_ENV: ${{ github.event.inputs.jcloud-api }}
          JC_API_DEV: ${{ env._WOLF_NPRD_GENERAL_JCLOUD_API_DEV }}
          JC_API_CI: ${{ env._WOLF_NPRD_GENERAL_JCLOUD_API_CI }}
          JC_API_PROD: ${{ env._WOLF_NPRD_GENERAL_JCLOUD_API_PROD }}
        run: |
          python -m pip install --upgrade pip
          python -m pip install wheel
          pip install --no-cache-dir ".[test]"
          sudo apt-get install libsndfile1
      - name: Test
        id: test
        run: |
          export JCLOUD_LOGLEVEL=DEBUG
          export JCLOUD_NO_SURVEY=1
          case $JC_API_ENV in
            dev)
              JC_API=$JC_API_DEV
              ;;
            CI)
              JC_API=$JC_API_CI
              ;;
            *)
              JC_API=$JC_API_PROD
              ;;
          esac
          export JCLOUD_API="https://"+$JC_API
          pytest --suppress-no-test-exit-code --cov=jcloud --cov-report=xml \
            -v -s --log-cli-level=DEBUG -m "not gpu" ${{ matrix.test-path }}
          echo "::set-output name=codecov_flag::jcloud"
        timeout-minutes: 30
      - name: Check codecov file
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "coverage.xml"
      - name: Upload coverage from test to Codecov
        uses: codecov/codecov-action@v2
        if: steps.check_files.outputs.files_exists == 'true' && ${{ matrix.python-version }} == '3.7'
        with:
          file: coverage.xml
          flags: ${{ steps.test.outputs.codecov_flag }}
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
      - if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: eventName,job
          text: |
            :no_entry: `${{ matrix.test-path }}` failed for branch `${{ github.event.inputs.branch }}`
          author_name: ":jcloud: Integration Test"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_NIGHTLY_TESTS_WEBHOOK }}
          MATRIX_CONTEXT: ${{ toJson(matrix) }}

  # just for blocking the merge until all parallel integration-tests are successful
  success-all-test:
    needs: integration-tests
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: technote-space/workflow-conclusion-action@v2
      - name: Check Failure
        if: env.WORKFLOW_CONCLUSION == 'failure'
        run: exit 1
      - name: Success
        if: ${{ success() }}
        run: echo "All Done"
